<?php
ob_start();
/**
 * Application level Controller
 *
 * This file is application-wide controller file. You can put all
 * application-wide controller-related methods here.
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       app.Controller
 * @since         CakePHP(tm) v 0.2.9
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */

App::uses('Controller', 'Controller');

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @package		app.Controller
 * @link		http://book.cakephp.org/2.0/en/controllers.html#the-app-controller
 */
class AppController extends Controller {
    
    var $helpers = array('Form','Html');
    var $components =array('RequestHandler','Session');
    var $loanReasons =  array(
        "1" => "Acquisition Loan - Under Contract",
        "2" => "Acquisition Loan - No Contract",
        "3" => "Refinance Loan",
        "4" => "Construction Loan",
        "5" => "Other",
        );
   var $propertyTypes =  array(
        "1" => "Multi-Family",
        "2" => "Retail Strip Center",
        "3" => "NNN",
        "4" => "Owner Occupied",
        "5" => "Industrial",
        "6" => "Office",
        "7" => "Self-Storage",
        "8" => "Hotel/Motel",
        "9" => "Assisted Living",
        "10" => "Manufactured Housing",
        "11" => "Restaurant",
        "12" => "Church",
        "13" => "Gas Station",
        "11" => "Restaurant",
        "12" => "Church",
        "13" => "Gas Station",
        "14" => "Raw Land",
        "15" => "SFR Rental",
        "16" => "Other"
        );
    var $loanAmounts =  array(
        "1-500000" => "Less than $500,000",
        "500000 - 1000000" => "$500,000 to $1 million",
        "1000000 - 2000000" => "$1 milliion to $2 million",
        "2000000 - 3000000" => "$2 million to $3 million",
        "3000000 - 8000000" => "$3 million to $8 million",
        "8000000 - 20000000" => "$8 million to $20 million",
        "20000000 - 100000000" => "$20 million to $100 million",
        "100000000 - above" => "$100 million +"
        );
    var $loanTypes =  array(
        "1" => "Permanent",
        "2" => "Short Term/Interim",
        "3" => "Construction",
        "4" => "Rehab",
        "5" => "Mezzanine",
        "6" => "Other", 
        );
    var $approxLoanValues =  array(
        "1" => "Less than 50%",
        "2" => "50% to 60%",
        "3" => "60% to 70%",
        "4" => "70% to 80%",
        "5" => "80% or more"       
        );
    var $userTypes = array(
        "1" =>"Borrower",
        "2" =>"Broker/Loan Officer",
        "3"=>"Sales Manager",
        "4"=>"Sales Director",
        "5" => "Processor",
        "6" =>"Funder"
        );
    var $investorTypes = array(
        "1" =>"Trust Deed Investor",
        "2" =>"Equity Investor",
        
        );
    var $roleTypes = array(
        "1" =>"Borrower",
        "2" =>"Broker/Loan Officer",
        "3"=>"Sales Manager",
        "4"=>"Sales Director",
        "5" => "Processor",
        "6" =>"Funder",
        "7" =>"Investor"
        );
     
    function beforeRender() {        
        if($this->name == 'CakeError') {
            $this->layout = 'error';
        }
    }
    
    /**
     * Summary :- loadAllModel
     * @return	object		Null
     * @params:- $model // array of models
     */
    
    function loadAllModel($model = array()){
        if(count($model)){
            foreach($model as $model){
                $this->loadModel("$model");
            }
        }
    }
    
    function beforeFilter(){
        $actions = array('admin_login','admin_forgot_password','admin_secure_check','admin_getlogodata');
        if(!in_array($this->params['action'],$actions) && ($this->params['prefix'] == 'admin')){
            $this->checkAdminSession();
            $this->layout = 'admin';
        }
    }
    /* Check admin session is Exist OR Not*/
   function checkAdminSession() {        
        if(!$this->Session->check('loggedUserInfo')) {                                                
            $this->redirect('/admin/admins/login');
		}else{
            $loggedUserInfo = $this->Session->read('loggedUserInfo');
            $this->set('loggedUserInfo',$loggedUserInfo);
        }
	}
    
    /**
     * Summary :- checkUserSession
     * @return	NULL
     * Description:- checkUserSession
     */
    
    function checkUserSession($actions = array(), $roleID = null){ 
       if (session_status() == PHP_SESSION_NONE) {
            session_start();
        }
     //  pr($this->Session->read('userInfo')); 
        if(!in_array($this->action,$actions)){
            $userArray = $this->Session->read('userInfo');
            if(!empty($userArray)){
                $userDetail = $this->Session->read('userInfo');
                $this->set('userDetail',$userDetail);
                if(isset($roleID) && $userArray['user_type'] != $roleID){
                    $this->redirect(array('controller' => 'homes', 'action' => 'logout'));
                }
            }else{
                $this->redirect(array('controller' => 'homes', 'action' => 'login'));
            }
        }
    }
    /**
     * Summary :- __getUserTypes
     * @return	NULL
     * Description :- __getUserTypes
     */
    
    public function getUserTypes(){
		$this->set('userTypes',$this->userTypes);		
	}
    
    /**
     * Summary :- __getLicenceTypes
     * @return	NULL
     * Description :- __getLicenceTypes
     */
    
    public function getLicenceTypes(){
		$licenceTypes = array("bre" =>"BRE Broker","cfl" =>"CFL");
		$this->set('licenceTypes',$licenceTypes);
	}
    
    /**
     * Summary:- __getReferredBy
     * @return	NULL
     * Description  :- __getReferredBy
     */
    
    public function getReferredBy(){
		$referredBy = array("1" =>"Borrower",
                            "2" =>"Broker",
                            "3" =>"Sales Manager",
                            "7" =>"Investor" 
                        );
		$this->set('referredBy',$referredBy);		
	}
    /**
    * @Date: Jul 1, 2015
    * @Method : generate_password
    * @Purpose: - generate_password
    **/

    function generatePassword($length = 8) {
        $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-=+;:,.?";
        $password = substr(str_shuffle($chars),0,$length);
        return $password;
    }
    
    /*
	* This function is used to send email with template
	* @copyright     smartData Enterprise Inc.
	* @method        sendEmail
	* @param         $to, $subject, $messages, $from, $reply,$path,$file_name
	* @return        void 
	* @since         version 0.0.1
	* @version       0.0.1 
	*/
	public function sendEmail($to = null, $subject ='', $messages = null, $from=null, $reply = null,$path=null,$file_name = null){
		$this->Email->smtpOptions = array(
			'host' => Configure::read('host'),
			'username' =>Configure::read('username'),
			'password' => Configure::read('password'),
			'timeout' => Configure::read('timeout')
		);                
        
		$this->Email->delivery = 'mail';//possible values smtp or mail 
        $admin_name = Configure::read('ADMIN_NAME');
		if(empty($reply)){
			$reply = $admin_name.'<'.Configure::read('replytoEmail').'>';
		}
		if(empty($from)){
			$from = $admin_name.'<'.Configure::read('fromEmail').'>';
		}
		$this->Email->from = $from;
		$this->Email->replyTo = $reply;
		if($to == 'admin'){
			$this->Email->to = $from;
		} else {
			$this->Email->to = $to;
		}
		
		if(!empty($path) && !empty($file_name))
		    $this->Email->attachments = array($file_name,$path.$file_name);
		    
		    if(empty($subject)){
		       $subject='Admin'; 
		    }
		    $this->Email->subject = $subject;
		    $this->set('content',$messages);
		    $this->set('smtp_errors', $this->Email->smtpError);
		    $this->Email->sendAs= 'both';
		    $this->Email->template='default';
		 
		if($this->Email->send()){
			return true;
		} else {
			return false;
		}
	}
     /**
     * Summary:- getPropertyTypes
     * @return	NULL
     * Description  :- getPropertyTypes
     */
    
    public function getPropertyTypes(){
		$this->set('propertyTypes',$this->propertyTypes);		
	}
    
    /**
     * Summary:- getLoanAmounts
     * @return	NULL
     * Description  :- getLoanAmounts
     */
    
    public function getLoanAmounts(){
		$this->set('loanAmounts',$this->loanAmounts);		
	}
    
    /**
     * Summary:- getLoanReasons
     * @return	NULL
     * Description  :- getLoanReasons
     */
    
    public function getLoanReasons(){
		$this->set('loanReasons',$this->loanReasons);		
	}
    
    /**
     * Summary:- getLoanTypes
     * @return	NULL
     * Description  :- getLoanTypes
     */
    
    public function getLoanTypes(){	
		$this->set('loanTypes',$this->loanTypes);		
	}
    
    /**
     * Summary:- getApproxLoanValues
     * @return	NULL
     * Description  :- getApproxLoanValues
     */
    
    public function getApproxLoanValues(){
		$this->set('approxLoanValues',$this->approxLoanValues);		
	}
    
    
    /**
     * Summary:- getInvestorType
     * @return	NULL
     * Description  :- getInvestorType
     */
    
    public function getInvestorType(){
		$this->set('investorTypes',$this->investorTypes);		
	}

    /**
     * Summary :- getRoleTypes
     * @return	NULL
     * Description :- getRoleTypes
     */
    
    public function getRoleTypes(){
		$this->set('roleTypes',$this->roleTypes);		
	}
    
    /**
     * Summary:-getControllerName
     * @return object
     * Description:- return controller name as per user type
     */
    public function getControllerName($user_type = null) {
        if($user_type == 1) {
			$controller =  'borrowers';
		}else if($user_type == 2){
			$controller =  'brokers';
		}else if($user_type == 3){
			$controller =  'sales_managers';
		}else if($user_type == 4){
			$controller =  'sales directors';
		}else if($user_type == 5){
			$controller =  'processors';
		}else if($user_type == 6){
			$controller =  'funders';
		}else {
			$controller =  'users';
		}
        return $controller;
    }
    
}